package testproject;
import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.Panel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.Set;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.xml.bind.annotation.XmlElementDecl.GLOBAL;

import org.omg.CORBA.PUBLIC_MEMBER;

public class BookManager extends JFrame {
	Scanner scan = new Scanner(System.in);
	int cnt=0;
	ArrayList<Book> bookList = new ArrayList<Book>();
	Container contentPane;
	String[] labels = { "isbn", "제목", "저자", "가격", "출판년도", "출판사","인기도" }; 
	int[] widths = { 10, 15, 10, 10, 10, 10, 10 };
	HashMap<String,String> id_book = new<String,String> HashMap();
	private JTextField[] fields;
	public BookManager() {
		
		setTitle("도서관리시스템");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLayout(new BorderLayout());
		contentPane = getContentPane(); 
		JPanel p1 = new JPanel(new GridLayout(6,2));
		JButton add = new JButton("도서추가");
		p1.add(add);
		JButton modify = new JButton("도서정보수정");
		p1.add(modify);
		JButton delete  = new JButton("도서삭제");
		p1.add(delete);
		JButton search  = new JButton("도서검색");
		p1.add(search);
		JButton input   = new JButton("파일읽기");
		p1.add(input);
		JButton output  = new JButton("파일저장");
		p1.add(output);
		JButton ranking  = new JButton("검색현황");
		p1.add(ranking);
		JButton showall  = new JButton("도서리스트");
		p1.add(showall);
		JButton rental  = new JButton("도서대여");
		p1.add(rental);
		JButton returned  = new JButton("도서반납");
		p1.add(returned);
		JButton inform  = new JButton("회원정보");
		p1.add(inform);
		JPanel p2 = new JPanel(new BorderLayout());
		JTextArea j = new JTextArea(30,40);
		JScrollPane jp = new JScrollPane(j);
		p2.add(jp);
		jp.getVerticalScrollBar().setValue(jp.getVerticalScrollBar().getMaximum());
		j.setEditable(false);
		JPanel p3 = new JPanel(new GridLayout(2,5));
		JTextField j1 = new JTextField("isbn",19);
		p3.add(j1);
		JTextField j2 = new JTextField("제목",8);
		p3.add(j2);
		JTextField j3 = new JTextField("저자",8);
		p3.add(j3);
		JTextField j4 = new JTextField("가격",8);
		p3.add(j4);
		JTextField j5 = new JTextField("출판년도",8);
		p3.add(j5);
		JTextField j6 = new JTextField("출판사",8);
		p3.add(j6);
		JTextField j7 = new JTextField("인기도",8);
		p3.add(j7);
		JButton addcomplete  = new JButton("추가");
		p3.add(addcomplete);
		
		contentPane.add(p1, BorderLayout.EAST);
		contentPane.add(p2, BorderLayout.CENTER);
		contentPane.add(p3, BorderLayout.SOUTH);
		setSize(800,500);
		setVisible(true);
		returned.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String id = (String)JOptionPane.showInputDialog(j,"회원의 이름을 입력해주세요.\n","도서반납창",JOptionPane.PLAIN_MESSAGE);
				String name = (String)JOptionPane.showInputDialog(j,"반납하실 도서의 제목을 입력해주세요.\n","도서반납창",JOptionPane.PLAIN_MESSAGE);
				Collection collection = id_book.keySet();
				Iterator iter = collection.iterator();
				while(iter.hasNext()) {
					String book = (String)iter.next();
					String names = (String)id_book.get(book);
					if(names.equals(id)&&book.equals(name)) {
						id_book.remove(book);
						for(int i=0;i<bookList.size();i++) {
							if(bookList.get(i).getTitle().equals(name)&&bookList.get(i).getRental().equals("N")) {
								bookList.get(i).setRental("Y");
								j.append("반납되었습니다.\n");
								break;
							}
						}
						break;
					}
				}
				
			}
		});
		inform.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String id = (String)JOptionPane.showInputDialog(j,"회원의 이름을 입력해주세요.\n","회원정보창",JOptionPane.PLAIN_MESSAGE);
				Collection collection = id_book.keySet();
				Iterator iter = collection.iterator();
				int temp=0;
				j.setText("");
				while(iter.hasNext()) {
					String book = (String)iter.next();
					String name = (String)id_book.get(book);
					if(name.equals(id)) {
						temp++;
					}
				}
				if(temp==0) {
					j.append("회원정보가 저장 되어있지 않습니다.\n");
				}else {
					Collection collection1 = id_book.keySet();
					Iterator iter1 = collection1.iterator();
					j.append("대여하신 목록입니다.\n");
					while(iter1.hasNext()) {
						String book = (String)iter1.next();
						String name = (String)id_book.get(book);
						if(name.equals(id)) {
							for(int i=0;i<cnt;i++) {
								if(bookList.get(i).getTitle().equals(book)) {
									j.append(bookList.get(i).getRentalTime()+book+"\n");
									break;
								}
							}
							
						}
					}
				}
				
			}
		});
		rental.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				j.setText("");
				int temp=0;
				String id = (String)JOptionPane.showInputDialog(j,"도서를 대여하겠습니다. 이름을 입력해주세요.\n","도서대여창",JOptionPane.PLAIN_MESSAGE);
				String title = (String)JOptionPane.showInputDialog(j,"도서를 대여하겠습니다. 대여하실 도서의 제목을 입력해주세요.\n","도서대여창",JOptionPane.PLAIN_MESSAGE);
				for(int i=0;i<bookList.size();i++) {
					if(bookList.get(i).getTitle().equals(title)) {
						temp++;
						if(bookList.get(i).getRental().equals("Y")) {
							id_book.put(title, id);
							bookList.get(i).setRental("N");
							SimpleDateFormat formatter = new SimpleDateFormat ( "yyyy.MM.dd HH:mm:ss", Locale.KOREA );
							Date currentTime = new Date ( );
							String dTime = formatter.format ( currentTime );
							bookList.get(i).setRentalTime(dTime);
							j.append("대여가 완료되었습니다.\n");
							break;

						}else if(bookList.get(i).getRental().equals("N")){
							j.append("이미 대여가 완료된 도서입니다.\n");
							break;
						}
					}
					
				}
				if(temp==0) {
					j.append("해당제목을 가진 도서가 없습니다.\n");
				}
				
			}
		});
		showall.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				j.setText("");
				j.append("전체 도서리스트를 출력하겠습니다.\n현재까지 추가된 도서는 총 "+cnt+"권 입니다.\n");
				for(int i=0;i<bookList.size();i++) {
					j.append("----------------------\n");
					j.append(i+1+"번 도서)\n"+bookList.get(i).toString());
				}
			}
		});
		ranking.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				j.setText("");
				int check[] = new int[bookList.size()];
				int rank[] = new int[bookList.size()];
				for(int z=0;z<bookList.size();z++) {
					rank[z]=bookList.get(z).getSearch_cnt();
				}
				
				int i,k;
				int iMin;
				for (k = 0; k< bookList.size()-1; k++) {
				    iMin = k;
				    for ( i = k+1; i < bookList.size(); i++) {
				        if (rank[i] > rank[iMin]) {
				            iMin = i;
				        }
				    }
				    if(iMin != k) {
				    	int tmp=rank[k];
				    	rank[k]=rank[iMin];
				    	rank[iMin]=tmp;
				        
				    }
				 
				}
				for(i=0;i<bookList.size();i++) {
					for(k=0;k<bookList.size();k++) {
						if(rank[i]==bookList.get(k).getSearch_cnt()&&check[k]!=1) {
							rank[i]=-1;
							check[k]=1;
							j.append("----------------------\n");
							j.append(bookList.get(k).toString2()+"총"+bookList.get(k).getSearch_cnt()+"번 검색되었습니다.\n");
						}
					}
				}
				
			}
		});
		add.addActionListener(new ActionListener() { 
			public void actionPerformed(ActionEvent e) {
				j.setText("");
				j.append("도서추가항목을 입력해주세요.\n");
				
			} 
		});
		
		addcomplete.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				j.setText("");
				String isbn =j1.getText();
				String title = j2.getText();
				String author = j3.getText();
				int price = Integer.parseInt(j4.getText()); 
				int pub_year = Integer.parseInt(j5.getText());
				String pub_company = j6.getText();
				int popularity = Integer.parseInt(j7.getText());
				bookList.add(new Book(isbn, title, author, price, pub_year, pub_company, popularity,0,"Y","0"));
				j.append("isbn :"+isbn+"\n"+"제목 :"+title+"\n"+"저자 :"+author+"\n"+"가격 :"+price+"\n"+"출판년도 :"+pub_year+"\n"+"출판사 :"+pub_company+"\n"+"인기도 :"+popularity+"\n"+"도서추가완료");
				cnt++;
				
			}
		});
		
		modify.addActionListener(new ActionListener() { 
			public void actionPerformed(ActionEvent e) {
				j.setText("");
				Object[] menu = {"isbn", "제목", "저자","가격","출판년도","출판사","인기도"};
				String s1 = (String)JOptionPane.showInputDialog(j,"도서를 수정하겠습니다. 수정할 도서의 제목을 입력하세요.","도서수정창",JOptionPane.PLAIN_MESSAGE);
				String s2 = (String)JOptionPane.showInputDialog(j,"검색하고 싶은 요소를 선택하시오.\n","요소선택창",JOptionPane.PLAIN_MESSAGE,null, menu,"isbn");
				String s3 = (String)JOptionPane.showInputDialog(j,s2+"에서 수정할 내용을 입력하세요.","도서수정창",JOptionPane.PLAIN_MESSAGE);
				for(int i=0;i<cnt;i++) {
					if(bookList.get(i).getTitle().equals(s1)) {
						if(s2.equals("제목")) {
							bookList.get(i).setTitle(s3);
						}else if(s2.equals("저자")) {
							bookList.get(i).setAuthor(s3);
						}else if(s2.equals("가격")) {
							bookList.get(i).setPrice(Integer.parseInt(s3));
						}else if(s2.equals("출판년도")) {
							bookList.get(i).setYear(Integer.parseInt(s3));
						}else if(s2.equals("출판사")) {
							bookList.get(i).setCompany(s3);
						}else if(s2.equals("인기도")) {
							bookList.get(i).setPop(Integer.parseInt(s3));
						}else if(s2.equals("isbn")) {
							bookList.get(i).setIsbn(s3);
						}
						j.append("수정완료되었습니다.");
					}
				}
				
			} 
		});
		delete.addActionListener(new ActionListener() { 
			public void actionPerformed(ActionEvent e) {
				j.setText("");
				String s = (String)JOptionPane.showInputDialog(j,"도서를 삭제하겠습니다. 삭제할 도서의 제목을 삭제입력창에 입력하시오.","도서삭제창",JOptionPane.PLAIN_MESSAGE);
				String title = s;
				for(int i=0;i<cnt;i++) {
					if(bookList.get(i).getTitle().equals(title)) {
						bookList.remove(i);
						cnt--;
						j.append("삭제되었습니다.");
					}
				}
				
				
			} 
		});
		search.addActionListener(new ActionListener() { 
			public void actionPerformed(ActionEvent e) {
				j.setText("");
				Object[] menu = {"isbn", "제목", "저자","가격","출판년도","출판사","인기도"};
				String s1 = (String)JOptionPane.showInputDialog(j,"검색하고 싶은 요소를 선택하시오.\n","요소선택창",JOptionPane.PLAIN_MESSAGE,null, menu,"isbn");
				String s2 = (String)JOptionPane.showInputDialog(j,"도서를 검색하겠습니다. 검색할 도서의 "+s1+"을(를) 도서검색창에 입력하시오.","도서검색창",JOptionPane.PLAIN_MESSAGE);
				if(s1.equals("제목")) {
					for(int i=0;i<cnt;i++) {
						if(bookList.get(i).getTitle().equals(s2)) {
							j.append(bookList.get(i).toString());
							bookList.get(i).plusSearch_cnt();
						}
					}
				}else if(s1.equals("저자")) {
					for(int i=0;i<cnt;i++) {
						if(bookList.get(i).getAuthor().equals(s2)) {
							j.append(bookList.get(i).toString());
							bookList.get(i).plusSearch_cnt();
						}
					}
				}else if(s1.equals("가격")) {
					for(int i=0;i<cnt;i++) {
						if(bookList.get(i).getPrice()==Integer.parseInt(s2)) {
							j.append(bookList.get(i).toString());
							bookList.get(i).plusSearch_cnt();
						}
					}
				}else if(s1.equals("출판년도")) {
					for(int i=0;i<cnt;i++) {
						if(bookList.get(i).getYear()==Integer.parseInt(s2)) {
							j.append(bookList.get(i).toString());
							bookList.get(i).plusSearch_cnt();
						}
					}
				}else if(s1.equals("출판사")) {
					for(int i=0;i<cnt;i++) {
						if(bookList.get(i).getCompany().equals(s2)) {
							j.append(bookList.get(i).toString());
							bookList.get(i).plusSearch_cnt();
						}
					}
				}else if(s1.equals("인기도")) {
					for(int i=0;i<cnt;i++) {
						if(bookList.get(i).getPop()==Integer.parseInt(s2)) {
							j.append(bookList.get(i).toString());
							bookList.get(i).plusSearch_cnt();
						}
					}
				}else if(s1.equals("isbn")) {
					for(int i=0;i<cnt;i++) {
						if(bookList.get(i).getIsbn().equals(s2)) {
							j.append(bookList.get(i).toString());
							bookList.get(i).plusSearch_cnt();
						}
					}
				}
			} 
		});
		input.addActionListener(new ActionListener() { 
			public void actionPerformed(ActionEvent e) {
				j.setText("");
				FileInputStream fin = null;
				ObjectInputStream ois = null;

				try{
					fin = new FileInputStream("booklist.dat");
					ois = new ObjectInputStream(fin);
					
					bookList = (ArrayList)ois.readObject();
					j.append("파일로드완료\n");
					cnt=bookList.size();
				}catch(Exception ex){
				}finally{
					try{
						ois.close();
						fin.close();
					}catch(IOException ioe){}
				} // finally
			} 
		});
		output.addActionListener(new ActionListener() { 
			public void actionPerformed(ActionEvent e) {
				j.setText("");
				FileOutputStream fout = null;
				ObjectOutputStream oos = null;
				 
				try{
					fout = new FileOutputStream("booklist.dat");
					oos = new ObjectOutputStream(fout);
					
					oos.writeObject(bookList);
					oos.reset();
					oos.writeObject(bookList);
					oos.reset();
					
					j.append("저장완료\n");
					
				}catch(Exception ex){
				}finally{
					try{
						oos.close();
						fout.close();
					}catch(IOException ioe){}
				} // finally
			} 
		});
	}	
		
	public String return_s(String x) {
		return x;
	}
	
	public static void main(String[] args) {
		new BookManager();
		

	}

}
